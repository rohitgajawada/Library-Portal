(dp1
S'output'
p2
S"<class 'sqlite3.OperationalError'> no such column: book.title"
p3
sS'layer'
p4
S'/home/rohit/Documents/itwsproject/web2py/applications/Library_Portal/controllers/default.py'
p5
sS'code'
p6
S'import datetime\ndef index():\n    thedate=datetime.date.today()\n    \n    state=0\n    if auth.user!=None and auth.user.is_admin==True:\n        state=1\n    \n    return dict(thedate=thedate, state=state)\n\ndef user():\n    return dict(form=auth())\n\ndef libreg():\n    return dict(form=auth.register())\n\ndef libadmin():\n    if auth.user!=None and auth.user.is_admin==True:\n        grid = SQLFORM.grid(db.book)\n        return dict(grid=grid)\n    else:\n        return dict()\n\ndef myborr():\n    abook = db.book(request.vars.check)\n    number = db((db.records.bookuser ==  auth.user.id) & (db.records.ifret == False)).count()\n    if number>=3:\n        response.flash=\'Reached maximum borrow limit!\'\n    else:\n        if abook.numcopy - abook.numref <= abook.numborrow:\n            response.flash=\'No more books available!\'\n            return str("Ran out of copies")\n        else:\n            db.records.insert(bookid=abook.id, bookuser=auth.user.id, date_borrow=datetime.datetime.today())\n            newborr=abook.numborrow+1\n            abook.update_record(numborrow=newborr)\n            return str("Borrowed") \n\n#def addrate():\ndef status():\n    if len(request.args): \n        page=int(request.args[0])\n    else: \n        page=0\n    items_per_page=10\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db(db.records.bookuser == auth.user.id).select(db.records.ALL, orderby=db.book.title, limitby=limitby)\n    return locals()\n\ndef borrow():\n    form1=FORM(INPUT(_id=\'keyword1\', _name=\'keyword1\', _onkeyup="ajax(\'callback1\', [\'keyword1\'], \'target1\');")) \n    target_div1=DIV(_id=\'target1\')\n\n    form2=FORM(INPUT(_id=\'keyword2\', _name=\'keyword2\', _onkeyup="ajax(\'callback2\', [\'keyword2\'], \'target2\');")) \n    target_div2=DIV(_id=\'target2\')\n\n    form3=FORM(INPUT(_id=\'keyword3\', _name=\'keyword3\', _onkeyup="ajax(\'callback3\', [\'keyword3\'], \'target3\');")) \n    target_div3=DIV(_id=\'target3\')\n\n    return locals()\n\ndef show():\n    mybook = db.book(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    return dict(mybook=mybook)\n\ndef callback1():\n    query = db.book.title.contains(request.vars.keyword1)\n    books = db(query).select(orderby=db.book.title)\n    links = [A(b.title, _href=URL(\'show\',args=b.id)) for b in books]\n    return UL(*links)\n\ndef callback2():\n    query = db.book.author.contains(request.vars.keyword2)\n    books = db(query).select(orderby=db.book.author)\n    links = [A(b.author, _href=URL(\'show\',args=b.id)) for b in books]\n    return UL(*links)\n\ndef callback3():\n    query = db.book.genre.contains(request.vars.keyword3)\n    books = db(query).select(orderby=db.book.genre)\n    links = [A(b.genre, _href=URL(\'show\',args=b.id)) for b in books]\n    return UL(*links)\n\ndef ebooks():\n    if len(request.args): \n        page=int(request.args[0])\n    else: \n        page=0\n    items_per_page=10\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db(db.book.ifebook==1).select(db.book.ALL, orderby=db.book.title, limitby=limitby)\n    return locals()\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\ndef call():\n    return service()\n\nresponse._vars=response._caller(status)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/rohit/Documents/itwsproject/web2py/applications/Library_Portal/controllers/default.py", line 101, in <module>\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/rohit/Documents/itwsproject/web2py/applications/Library_Portal/controllers/default.py", line 47, in status\n    rows=db(db.records.bookuser == auth.user.id).select(db.records.ALL, orderby=db.book.title, limitby=limitby)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 124, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1293, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1250, in _select_aux\n    self.execute(sql)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1385, in execute\n    return self.log_execute(*a, **b)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1379, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\nOperationalError: no such column: book.title\n'
p11
s.