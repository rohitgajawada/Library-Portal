(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> CONTAINS() takes at least 3 arguments (3 given)"
p3
sS'layer'
p4
S'/home/rohit/Documents/itwsproject/web2py/applications/Library_Portal/controllers/default.py'
p5
sS'code'
p6
S'import datetime\n@auth.requires_login()\ndef index():\n    thedate=datetime.date.today()\n    page=0\n    items_per_page=10\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db(db.book).select(db.book.ALL, orderby=db.book.dateadded, limitby=limitby)\n    pops=db(db.book).select(db.book.ALL, orderby=db.book.rating, limitby=limitby)\n    wishes=db(db.wish.bookuser == auth.user.id).select(db.wish.ALL, orderby=db.wish.id)\n    return locals()\n\ndef manage():\n    grid=SQLFORM.grid(db.auth_user)\n    return locals()\n\ndef user():\n    return dict(form=auth())\n\ndef libreg():\n    return dict(form=auth.register())\n\n@auth.requires(auth.user!=None and auth.user.is_admin==True)\ndef libadmin():\n    if auth.user!=None and auth.user.is_admin==True:\n        grid = SQLFORM.grid(db.book)\n        return dict(grid=grid)\n    else:\n        return dict()\n\ndef mycheck():\n    abook = db.book(request.vars.check)\n    number = db((db.records.bookuser ==  auth.user.id) & (db.records.ifret == False)).count()\n    if number>=3:\n        response.flash=\'You cannot borrow any more books so you will have to return a book\'\n    else:\n        num = abook.numcopy - abook.numref\n        if num <= abook.numborrow:\n            response.flash=\'No more books available!\'\n            return str("Ran out of copies")\n        else:\n            return str(num)+" books available" \n\ndef wishlist():\n    mywish = db.book(request.vars.love)\n    nwish = db((db.wish.bookuser == auth.user.id) & (db.wish.bookid == mywish.id)).count()\n    if nwish != 1:\n        db.wish.insert(bookid = mywish.id, bookuser=auth.user.id)\n    return str("Added to wishlist") \n\ndef status():\n    if auth.user == None:\n        rows=[]\n        return dict()\n    if len(request.args): \n        page=int(request.args[0])\n    else: \n        page=0\n    items_per_page=10\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db(db.records.bookuser == auth.user.id).select(db.records.ALL, orderby=db.records.date_borrow, limitby=limitby)\n    return locals()\n\ndef borrow():\n    form1=FORM(INPUT(_id=\'keyword1\', _name=\'keyword1\', _onkeyup=\'ajax("callback1", ["keyword1"], "target1");\')) \n    target_div1=DIV(_id=\'target1\')\n\n    form2=FORM(INPUT(_id=\'keyword2\', _name=\'keyword2\', _onkeyup="ajax(\'callback2\', [\'keyword2\'], \'target2\');")) \n    target_div2=DIV(_id=\'target2\')\n\n    form3=FORM(INPUT(_id=\'keyword3\', _name=\'keyword3\', _onkeyup="ajax(\'callback3\', [\'keyword3\'], \'target3\');")) \n    target_div3=DIV(_id=\'target3\')\n\n    return locals()\n\ndef borrows():\n    form=FORM(INPUT(_id=\'keyword\', _name=\'keyword\', _onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');")) \n    target_div=DIV(_id=\'target\')\n    return locals()\n\ndef callback():\n    query = db.auth_user.email.contains(request.vars.keyword)\n    mems = db(query).select(orderby=db.auth_user.email)\n    links = [A(str(mem.email)+" - "+str(mem.first_name)+" "+str(mem.last_name), _href=URL(\'selectborrow\',args=mem.id)) for mem in mems]\n    return UL(*links)\n\ndef selectborrow():\n    member = db.auth_user(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\n    form1=FORM(INPUT(_id=\'key1\', _name=\'key1\', _onkeyup="ajax(\'http://127.0.0.1:8000/Library_Portal/default/call1\', [\'key1\'], \'target1\')")) \n    target_div1=DIV(_id=\'target1\')\n\n    \n    return locals()\n\ndef call1():\n    query = db.book.title.contains(request.vars.keyword1)\n    books = db(query).select(orderby=db.book.title)\n    links = [A(b.title, _href=URL(\'show\',args=b.id)) for b in books]\n    return UL(*links)\n\ndef callback1():\n    query = db.book.title.contains(request.vars.keyword1)\n    books = db(query).select(orderby=db.book.title)\n    links = [A(b.title, _href=URL(\'show\',args=b.id)) for b in books]\n    return UL(*links)\n\ndef callback2():\n    query = db.book.author.contains(request.vars.keyword2)\n    books = db(query).select(orderby=db.book.author)\n    links = [A(b.author, _href=URL(\'show\',args=b.id)) for b in books]\n    return UL(*links)\n\ndef callback3():\n    query = db.book.genre.contains(request.vars.keyword3)\n    books = db(query).select(orderby=db.book.genre)\n    links = [A(b.genre, _href=URL(\'show\',args=b.id)) for b in books]\n    return UL(*links)\n\ndef show():\n\n    form=FORM(\'Rating:  \',\n              INPUT(_type=\'radio\', _name=\'test\', _value="1", value=\'b\'),\n              INPUT(_type=\'radio\', _name=\'test\', _value="2", value=\'b\'),\n              INPUT(_type=\'radio\', _name=\'test\', _value="3", value=\'b\'),\n              INPUT(_type=\'radio\', _name=\'test\', _value="4", value=\'b\'),\n              INPUT(_type=\'radio\', _name=\'test\', _value="5", value=\'b\'),\n              INPUT(_id="rate", _type=\'submit\'))\n\n    mybook = db.book(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\n    if form.process().accepted:\n        number = db((db.records.bookuser ==  auth.user.id) & (db.records.bookid == mybook.id )).count()\n        if number:\n            sum = mybook.sumrating\n            num = mybook.numrating\n            sum = sum + int(form.vars["test"])\n            num = num + 1\n            newrating = sum/num\n            mybook.update_record(rating = newrating, sumrating = sum, numrating = num)\n\n    return dict(mybook=mybook, form=form)\n\ndef ebooks():\n    if len(request.args): \n        page=int(request.args[0])\n    else: \n        page=0\n    items_per_page=10\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db(db.book.ifebook==1).select(db.book.ALL, orderby=db.book.title, limitby=limitby)\n    return locals()\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\ndef call():\n    return service()\n\ndef download_pdf():\n    filename=request.args[0]\n    path=os.path.join(request.folder,\'uploads\', filename)\n    response.headers[\'ContentType\'] ="application/pdf"\n    response.headers[\'Content-Disposition\']="inline; " + filename\n    return response.stream(open(filename), chunk_size=65536)\n\nresponse._vars=response._caller(call1)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/rohit/Documents/itwsproject/web2py/applications/Library_Portal/controllers/default.py", line 168, in <module>\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/rohit/Documents/itwsproject/web2py/applications/Library_Portal/controllers/default.py", line 98, in call1\n    books = db(query).select(orderby=db.book.title)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 124, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1280, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1167, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/rohit/Documents/itwsproject/web2py/gluon/packages/dal/pydal/adapters/base.py", line 954, in expand\n    rv = op(first, **optional_args)\nTypeError: CONTAINS() takes at least 3 arguments (3 given)\n'
p11
s.